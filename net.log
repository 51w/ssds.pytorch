===> Loading data
loading annotations into memory...
Done (t=0.31s)
creating index...
index created!
val2017 img path loaded from ./data/COCO/cache/val2017_img_path.pkl
val2017 gt roidb loaded from ./data/COCO/cache/val2017_gt_roidb.pkl
===> Building model
==>Feature map size:
[(19, 19), (10, 10), (5, 5), (3, 3), (2, 2), (1, 1)]
Utilize GPUs for computation
Number of GPU available 1
Model architectures:
RFBLite(
  (base): ModuleList(
    (0): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
    )
    (1): Sequential(
      (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (2): Sequential(
      (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (3): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128, bias=False)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (4): Sequential(
      (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128, bias=False)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (5): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256, bias=False)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (6): Sequential(
      (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256, bias=False)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (7): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (8): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (9): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (10): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (11): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (12): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=512, bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
    (13): Sequential(
      (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024, bias=False)
      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
      (3): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (4): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True)
      (5): ReLU(inplace)
    )
  )
  (norm): BasicRFB_a_lite(
    (branch0): Sequential(
      (0): BasicConv(
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
        (relu): ReLU(inplace)
      )
      (1): BasicSepConv(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
      )
    )
    (branch1): Sequential(
      (0): BasicConv(
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
        (relu): ReLU(inplace)
      )
      (1): BasicConv(
        (conv): Conv2d(128, 128, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
        (relu): ReLU(inplace)
      )
      (2): BasicSepConv(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
      )
    )
    (branch2): Sequential(
      (0): BasicConv(
        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
        (relu): ReLU(inplace)
      )
      (1): BasicConv(
        (conv): Conv2d(128, 128, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
        (relu): ReLU(inplace)
      )
      (2): BasicSepConv(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
      )
    )
    (branch3): Sequential(
      (0): BasicConv(
        (conv): Conv2d(512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True)
        (relu): ReLU(inplace)
      )
      (1): BasicConv(
        (conv): Conv2d(64, 96, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
        (bn): BatchNorm2d(96, eps=1e-05, momentum=0.01, affine=True)
        (relu): ReLU(inplace)
      )
      (2): BasicConv(
        (conv): Conv2d(96, 128, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
        (relu): ReLU(inplace)
      )
      (3): BasicSepConv(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(5, 5), dilation=(5, 5), bias=False)
        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
      )
    )
    (ConvLinear): BasicConv(
      (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True)
    )
    (relu): ReLU()
  )
  (extras): ModuleList(
    (0): BasicRFB_lite(
      (branch1): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 192, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(192, 192, kernel_size=(3, 1), stride=(2, 2), padding=(1, 0), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True)
          (relu): ReLU(inplace)
        )
        (3): BasicSepConv(
          (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True)
        )
      )
      (branch2): Sequential(
        (0): BasicConv(
          (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
          (relu): ReLU(inplace)
        )
        (1): BasicConv(
          (conv): Conv2d(128, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True)
          (relu): ReLU(inplace)
        )
        (2): BasicConv(
          (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True)
          (relu): ReLU(inplace)
        )
        (3): BasicSepConv(
          (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(5, 5), dilation=(5, 5), bias=False)
          (bn): BatchNorm2d(192, eps=1e-05, momentum=0.01, affine=True)
        )
      )
      (ConvLinear): BasicConv(
        (conv): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True)
      )
      (shortcut): BasicConv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.01, affine=True)
      )
      (relu): ReLU()
    )
    (1): BasicConv(
      (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
      (relu): ReLU(inplace)
    )
    (2): BasicConv(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True)
      (relu): ReLU(inplace)
    )
    (3): BasicConv(
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
      (relu): ReLU(inplace)
    )
    (4): BasicConv(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.01, affine=True)
      (relu): ReLU(inplace)
    )
    (5): BasicConv(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.01, affine=True)
      (relu): ReLU(inplace)
    )
    (6): BasicConv(
      (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.01, affine=True)
      (relu): ReLU(inplace)
    )
  )
  (loc): ModuleList(
    (0): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(1024, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(512, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): Conv2d(256, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): Conv2d(256, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): Conv2d(128, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (conf): ModuleList(
    (0): Conv2d(512, 486, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): Conv2d(1024, 486, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Conv2d(512, 486, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): Conv2d(256, 486, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): Conv2d(256, 324, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (5): Conv2d(128, 324, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (softmax): Softmax()
)

Parameters and size:
base.0.0.weight: [32, 3, 3, 3]
base.0.1.weight: [32]
base.0.1.bias: [32]
base.1.0.weight: [32, 1, 3, 3]
base.1.1.weight: [32]
base.1.1.bias: [32]
base.1.3.weight: [64, 32, 1, 1]
base.1.4.weight: [64]
base.1.4.bias: [64]
base.2.0.weight: [64, 1, 3, 3]
base.2.1.weight: [64]
base.2.1.bias: [64]
base.2.3.weight: [128, 64, 1, 1]
base.2.4.weight: [128]
base.2.4.bias: [128]
base.3.0.weight: [128, 1, 3, 3]
base.3.1.weight: [128]
base.3.1.bias: [128]
base.3.3.weight: [128, 128, 1, 1]
base.3.4.weight: [128]
base.3.4.bias: [128]
base.4.0.weight: [128, 1, 3, 3]
base.4.1.weight: [128]
base.4.1.bias: [128]
base.4.3.weight: [256, 128, 1, 1]
base.4.4.weight: [256]
base.4.4.bias: [256]
base.5.0.weight: [256, 1, 3, 3]
base.5.1.weight: [256]
base.5.1.bias: [256]
base.5.3.weight: [256, 256, 1, 1]
base.5.4.weight: [256]
base.5.4.bias: [256]
base.6.0.weight: [256, 1, 3, 3]
base.6.1.weight: [256]
base.6.1.bias: [256]
base.6.3.weight: [512, 256, 1, 1]
base.6.4.weight: [512]
base.6.4.bias: [512]
base.7.0.weight: [512, 1, 3, 3]
base.7.1.weight: [512]
base.7.1.bias: [512]
base.7.3.weight: [512, 512, 1, 1]
base.7.4.weight: [512]
base.7.4.bias: [512]
base.8.0.weight: [512, 1, 3, 3]
base.8.1.weight: [512]
base.8.1.bias: [512]
base.8.3.weight: [512, 512, 1, 1]
base.8.4.weight: [512]
base.8.4.bias: [512]
base.9.0.weight: [512, 1, 3, 3]
base.9.1.weight: [512]
base.9.1.bias: [512]
base.9.3.weight: [512, 512, 1, 1]
base.9.4.weight: [512]
base.9.4.bias: [512]
base.10.0.weight: [512, 1, 3, 3]
base.10.1.weight: [512]
base.10.1.bias: [512]
base.10.3.weight: [512, 512, 1, 1]
base.10.4.weight: [512]
base.10.4.bias: [512]
base.11.0.weight: [512, 1, 3, 3]
base.11.1.weight: [512]
base.11.1.bias: [512]
base.11.3.weight: [512, 512, 1, 1]
base.11.4.weight: [512]
base.11.4.bias: [512]
base.12.0.weight: [512, 1, 3, 3]
base.12.1.weight: [512]
base.12.1.bias: [512]
base.12.3.weight: [1024, 512, 1, 1]
base.12.4.weight: [1024]
base.12.4.bias: [1024]
base.13.0.weight: [1024, 1, 3, 3]
base.13.1.weight: [1024]
base.13.1.bias: [1024]
base.13.3.weight: [1024, 1024, 1, 1]
base.13.4.weight: [1024]
base.13.4.bias: [1024]
norm.branch0.0.conv.weight: [128, 512, 1, 1]
norm.branch0.0.bn.weight: [128]
norm.branch0.0.bn.bias: [128]
norm.branch0.1.conv.weight: [128, 128, 3, 3]
norm.branch0.1.bn.weight: [128]
norm.branch0.1.bn.bias: [128]
norm.branch1.0.conv.weight: [128, 512, 1, 1]
norm.branch1.0.bn.weight: [128]
norm.branch1.0.bn.bias: [128]
norm.branch1.1.conv.weight: [128, 128, 3, 1]
norm.branch1.1.bn.weight: [128]
norm.branch1.1.bn.bias: [128]
norm.branch1.2.conv.weight: [128, 128, 3, 3]
norm.branch1.2.bn.weight: [128]
norm.branch1.2.bn.bias: [128]
norm.branch2.0.conv.weight: [128, 512, 1, 1]
norm.branch2.0.bn.weight: [128]
norm.branch2.0.bn.bias: [128]
norm.branch2.1.conv.weight: [128, 128, 1, 3]
norm.branch2.1.bn.weight: [128]
norm.branch2.1.bn.bias: [128]
norm.branch2.2.conv.weight: [128, 128, 3, 3]
norm.branch2.2.bn.weight: [128]
norm.branch2.2.bn.bias: [128]
norm.branch3.0.conv.weight: [64, 512, 1, 1]
norm.branch3.0.bn.weight: [64]
norm.branch3.0.bn.bias: [64]
norm.branch3.1.conv.weight: [96, 64, 1, 3]
norm.branch3.1.bn.weight: [96]
norm.branch3.1.bn.bias: [96]
norm.branch3.2.conv.weight: [128, 96, 3, 1]
norm.branch3.2.bn.weight: [128]
norm.branch3.2.bn.bias: [128]
norm.branch3.3.conv.weight: [128, 128, 3, 3]
norm.branch3.3.bn.weight: [128]
norm.branch3.3.bn.bias: [128]
norm.ConvLinear.conv.weight: [512, 512, 1, 1]
norm.ConvLinear.bn.weight: [512]
norm.ConvLinear.bn.bias: [512]
extras.0.branch1.0.conv.weight: [128, 1024, 1, 1]
extras.0.branch1.0.bn.weight: [128]
extras.0.branch1.0.bn.bias: [128]
extras.0.branch1.1.conv.weight: [192, 128, 1, 3]
extras.0.branch1.1.bn.weight: [192]
extras.0.branch1.1.bn.bias: [192]
extras.0.branch1.2.conv.weight: [192, 192, 3, 1]
extras.0.branch1.2.bn.weight: [192]
extras.0.branch1.2.bn.bias: [192]
extras.0.branch1.3.conv.weight: [192, 192, 3, 3]
extras.0.branch1.3.bn.weight: [192]
extras.0.branch1.3.bn.bias: [192]
extras.0.branch2.0.conv.weight: [128, 1024, 1, 1]
extras.0.branch2.0.bn.weight: [128]
extras.0.branch2.0.bn.bias: [128]
extras.0.branch2.1.conv.weight: [192, 128, 3, 3]
extras.0.branch2.1.bn.weight: [192]
extras.0.branch2.1.bn.bias: [192]
extras.0.branch2.2.conv.weight: [192, 192, 3, 3]
extras.0.branch2.2.bn.weight: [192]
extras.0.branch2.2.bn.bias: [192]
extras.0.branch2.3.conv.weight: [192, 192, 3, 3]
extras.0.branch2.3.bn.weight: [192]
extras.0.branch2.3.bn.bias: [192]
extras.0.ConvLinear.conv.weight: [512, 384, 1, 1]
extras.0.ConvLinear.bn.weight: [512]
extras.0.ConvLinear.bn.bias: [512]
extras.0.shortcut.conv.weight: [512, 1024, 1, 1]
extras.0.shortcut.bn.weight: [512]
extras.0.shortcut.bn.bias: [512]
extras.1.conv.weight: [128, 512, 1, 1]
extras.1.bn.weight: [128]
extras.1.bn.bias: [128]
extras.2.conv.weight: [256, 128, 3, 3]
extras.2.bn.weight: [256]
extras.2.bn.bias: [256]
extras.3.conv.weight: [128, 256, 1, 1]
extras.3.bn.weight: [128]
extras.3.bn.bias: [128]
extras.4.conv.weight: [256, 128, 3, 3]
extras.4.bn.weight: [256]
extras.4.bn.bias: [256]
extras.5.conv.weight: [64, 256, 1, 1]
extras.5.bn.weight: [64]
extras.5.bn.bias: [64]
extras.6.conv.weight: [128, 64, 3, 3]
extras.6.bn.weight: [128]
extras.6.bn.bias: [128]
loc.0.weight: [24, 512, 3, 3]
loc.0.bias: [24]
loc.1.weight: [24, 1024, 3, 3]
loc.1.bias: [24]
loc.2.weight: [24, 512, 3, 3]
loc.2.bias: [24]
loc.3.weight: [24, 256, 3, 3]
loc.3.bias: [24]
loc.4.weight: [16, 256, 3, 3]
loc.4.bias: [16]
loc.5.weight: [16, 128, 3, 3]
loc.5.bias: [16]
conf.0.weight: [486, 512, 3, 3]
conf.0.bias: [486]
conf.1.weight: [486, 1024, 3, 3]
conf.1.bias: [486]
conf.2.weight: [486, 512, 3, 3]
conf.2.bias: [486]
conf.3.weight: [486, 256, 3, 3]
conf.3.bias: [486]
conf.4.weight: [324, 256, 3, 3]
conf.4.bias: [324]
conf.5.weight: [324, 128, 3, 3]
conf.5.bias: [324]
Epoch 45/50:
Restoring checkpoint from ./experiments/models/rfb_mobilenet_v1_coco/rfb_lite_mobilenet_v1_coco_epoch_45.pth
=> loading checkpoint './experiments/models/rfb_mobilenet_v1_coco/rfb_lite_mobilenet_v1_coco_epoch_45.pth'
=> Weigths in the checkpoints:
['base.0.0.weight', 'base.0.1.weight', 'base.0.1.bias', 'base.0.1.running_mean', 'base.0.1.running_var', 'base.1.0.weight', 'base.1.1.weight', 'base.1.1.bias', 'base.1.1.running_mean', 'base.1.1.running_var', 'base.1.3.weight', 'base.1.4.weight', 'base.1.4.bias', 'base.1.4.running_mean', 'base.1.4.running_var', 'base.2.0.weight', 'base.2.1.weight', 'base.2.1.bias', 'base.2.1.running_mean', 'base.2.1.running_var', 'base.2.3.weight', 'base.2.4.weight', 'base.2.4.bias', 'base.2.4.running_mean', 'base.2.4.running_var', 'base.3.0.weight', 'base.3.1.weight', 'base.3.1.bias', 'base.3.1.running_mean', 'base.3.1.running_var', 'base.3.3.weight', 'base.3.4.weight', 'base.3.4.bias', 'base.3.4.running_mean', 'base.3.4.running_var', 'base.4.0.weight', 'base.4.1.weight', 'base.4.1.bias', 'base.4.1.running_mean', 'base.4.1.running_var', 'base.4.3.weight', 'base.4.4.weight', 'base.4.4.bias', 'base.4.4.running_mean', 'base.4.4.running_var', 'base.5.0.weight', 'base.5.1.weight', 'base.5.1.bias', 'base.5.1.running_mean', 'base.5.1.running_var', 'base.5.3.weight', 'base.5.4.weight', 'base.5.4.bias', 'base.5.4.running_mean', 'base.5.4.running_var', 'base.6.0.weight', 'base.6.1.weight', 'base.6.1.bias', 'base.6.1.running_mean', 'base.6.1.running_var', 'base.6.3.weight', 'base.6.4.weight', 'base.6.4.bias', 'base.6.4.running_mean', 'base.6.4.running_var', 'base.7.0.weight', 'base.7.1.weight', 'base.7.1.bias', 'base.7.1.running_mean', 'base.7.1.running_var', 'base.7.3.weight', 'base.7.4.weight', 'base.7.4.bias', 'base.7.4.running_mean', 'base.7.4.running_var', 'base.8.0.weight', 'base.8.1.weight', 'base.8.1.bias', 'base.8.1.running_mean', 'base.8.1.running_var', 'base.8.3.weight', 'base.8.4.weight', 'base.8.4.bias', 'base.8.4.running_mean', 'base.8.4.running_var', 'base.9.0.weight', 'base.9.1.weight', 'base.9.1.bias', 'base.9.1.running_mean', 'base.9.1.running_var', 'base.9.3.weight', 'base.9.4.weight', 'base.9.4.bias', 'base.9.4.running_mean', 'base.9.4.running_var', 'base.10.0.weight', 'base.10.1.weight', 'base.10.1.bias', 'base.10.1.running_mean', 'base.10.1.running_var', 'base.10.3.weight', 'base.10.4.weight', 'base.10.4.bias', 'base.10.4.running_mean', 'base.10.4.running_var', 'base.11.0.weight', 'base.11.1.weight', 'base.11.1.bias', 'base.11.1.running_mean', 'base.11.1.running_var', 'base.11.3.weight', 'base.11.4.weight', 'base.11.4.bias', 'base.11.4.running_mean', 'base.11.4.running_var', 'base.12.0.weight', 'base.12.1.weight', 'base.12.1.bias', 'base.12.1.running_mean', 'base.12.1.running_var', 'base.12.3.weight', 'base.12.4.weight', 'base.12.4.bias', 'base.12.4.running_mean', 'base.12.4.running_var', 'base.13.0.weight', 'base.13.1.weight', 'base.13.1.bias', 'base.13.1.running_mean', 'base.13.1.running_var', 'base.13.3.weight', 'base.13.4.weight', 'base.13.4.bias', 'base.13.4.running_mean', 'base.13.4.running_var', 'norm.branch0.0.conv.weight', 'norm.branch0.0.bn.weight', 'norm.branch0.0.bn.bias', 'norm.branch0.0.bn.running_mean', 'norm.branch0.0.bn.running_var', 'norm.branch0.1.conv.weight', 'norm.branch0.1.bn.weight', 'norm.branch0.1.bn.bias', 'norm.branch0.1.bn.running_mean', 'norm.branch0.1.bn.running_var', 'norm.branch1.0.conv.weight', 'norm.branch1.0.bn.weight', 'norm.branch1.0.bn.bias', 'norm.branch1.0.bn.running_mean', 'norm.branch1.0.bn.running_var', 'norm.branch1.1.conv.weight', 'norm.branch1.1.bn.weight', 'norm.branch1.1.bn.bias', 'norm.branch1.1.bn.running_mean', 'norm.branch1.1.bn.running_var', 'norm.branch1.2.conv.weight', 'norm.branch1.2.bn.weight', 'norm.branch1.2.bn.bias', 'norm.branch1.2.bn.running_mean', 'norm.branch1.2.bn.running_var', 'norm.branch2.0.conv.weight', 'norm.branch2.0.bn.weight', 'norm.branch2.0.bn.bias', 'norm.branch2.0.bn.running_mean', 'norm.branch2.0.bn.running_var', 'norm.branch2.1.conv.weight', 'norm.branch2.1.bn.weight', 'norm.branch2.1.bn.bias', 'norm.branch2.1.bn.running_mean', 'norm.branch2.1.bn.running_var', 'norm.branch2.2.conv.weight', 'norm.branch2.2.bn.weight', 'norm.branch2.2.bn.bias', 'norm.branch2.2.bn.running_mean', 'norm.branch2.2.bn.running_var', 'norm.branch3.0.conv.weight', 'norm.branch3.0.bn.weight', 'norm.branch3.0.bn.bias', 'norm.branch3.0.bn.running_mean', 'norm.branch3.0.bn.running_var', 'norm.branch3.1.conv.weight', 'norm.branch3.1.bn.weight', 'norm.branch3.1.bn.bias', 'norm.branch3.1.bn.running_mean', 'norm.branch3.1.bn.running_var', 'norm.branch3.2.conv.weight', 'norm.branch3.2.bn.weight', 'norm.branch3.2.bn.bias', 'norm.branch3.2.bn.running_mean', 'norm.branch3.2.bn.running_var', 'norm.branch3.3.conv.weight', 'norm.branch3.3.bn.weight', 'norm.branch3.3.bn.bias', 'norm.branch3.3.bn.running_mean', 'norm.branch3.3.bn.running_var', 'norm.ConvLinear.conv.weight', 'norm.ConvLinear.bn.weight', 'norm.ConvLinear.bn.bias', 'norm.ConvLinear.bn.running_mean', 'norm.ConvLinear.bn.running_var', 'extras.0.branch1.0.conv.weight', 'extras.0.branch1.0.bn.weight', 'extras.0.branch1.0.bn.bias', 'extras.0.branch1.0.bn.running_mean', 'extras.0.branch1.0.bn.running_var', 'extras.0.branch1.1.conv.weight', 'extras.0.branch1.1.bn.weight', 'extras.0.branch1.1.bn.bias', 'extras.0.branch1.1.bn.running_mean', 'extras.0.branch1.1.bn.running_var', 'extras.0.branch1.2.conv.weight', 'extras.0.branch1.2.bn.weight', 'extras.0.branch1.2.bn.bias', 'extras.0.branch1.2.bn.running_mean', 'extras.0.branch1.2.bn.running_var', 'extras.0.branch1.3.conv.weight', 'extras.0.branch1.3.bn.weight', 'extras.0.branch1.3.bn.bias', 'extras.0.branch1.3.bn.running_mean', 'extras.0.branch1.3.bn.running_var', 'extras.0.branch2.0.conv.weight', 'extras.0.branch2.0.bn.weight', 'extras.0.branch2.0.bn.bias', 'extras.0.branch2.0.bn.running_mean', 'extras.0.branch2.0.bn.running_var', 'extras.0.branch2.1.conv.weight', 'extras.0.branch2.1.bn.weight', 'extras.0.branch2.1.bn.bias', 'extras.0.branch2.1.bn.running_mean', 'extras.0.branch2.1.bn.running_var', 'extras.0.branch2.2.conv.weight', 'extras.0.branch2.2.bn.weight', 'extras.0.branch2.2.bn.bias', 'extras.0.branch2.2.bn.running_mean', 'extras.0.branch2.2.bn.running_var', 'extras.0.branch2.3.conv.weight', 'extras.0.branch2.3.bn.weight', 'extras.0.branch2.3.bn.bias', 'extras.0.branch2.3.bn.running_mean', 'extras.0.branch2.3.bn.running_var', 'extras.0.ConvLinear.conv.weight', 'extras.0.ConvLinear.bn.weight', 'extras.0.ConvLinear.bn.bias', 'extras.0.ConvLinear.bn.running_mean', 'extras.0.ConvLinear.bn.running_var', 'extras.0.shortcut.conv.weight', 'extras.0.shortcut.bn.weight', 'extras.0.shortcut.bn.bias', 'extras.0.shortcut.bn.running_mean', 'extras.0.shortcut.bn.running_var', 'extras.1.conv.weight', 'extras.1.bn.weight', 'extras.1.bn.bias', 'extras.1.bn.running_mean', 'extras.1.bn.running_var', 'extras.2.conv.weight', 'extras.2.bn.weight', 'extras.2.bn.bias', 'extras.2.bn.running_mean', 'extras.2.bn.running_var', 'extras.3.conv.weight', 'extras.3.bn.weight', 'extras.3.bn.bias', 'extras.3.bn.running_mean', 'extras.3.bn.running_var', 'extras.4.conv.weight', 'extras.4.bn.weight', 'extras.4.bn.bias', 'extras.4.bn.running_mean', 'extras.4.bn.running_var', 'extras.5.conv.weight', 'extras.5.bn.weight', 'extras.5.bn.bias', 'extras.5.bn.running_mean', 'extras.5.bn.running_var', 'extras.6.conv.weight', 'extras.6.bn.weight', 'extras.6.bn.bias', 'extras.6.bn.running_mean', 'extras.6.bn.running_var', 'loc.0.weight', 'loc.0.bias', 'loc.1.weight', 'loc.1.bias', 'loc.2.weight', 'loc.2.bias', 'loc.3.weight', 'loc.3.bias', 'loc.4.weight', 'loc.4.bias', 'loc.5.weight', 'loc.5.bias', 'conf.0.weight', 'conf.0.bias', 'conf.1.weight', 'conf.1.bias', 'conf.2.weight', 'conf.2.bias', 'conf.3.weight', 'conf.3.bias', 'conf.4.weight', 'conf.4.bias', 'conf.5.weight', 'conf.5.bias']
=> Resume weigths:
['base.0.0.weight', 'base.0.1.weight', 'base.0.1.bias', 'base.0.1.running_mean', 'base.0.1.running_var', 'base.1.0.weight', 'base.1.1.weight', 'base.1.1.bias', 'base.1.1.running_mean', 'base.1.1.running_var', 'base.1.3.weight', 'base.1.4.weight', 'base.1.4.bias', 'base.1.4.running_mean', 'base.1.4.running_var', 'base.2.0.weight', 'base.2.1.weight', 'base.2.1.bias', 'base.2.1.running_mean', 'base.2.1.running_var', 'base.2.3.weight', 'base.2.4.weight', 'base.2.4.bias', 'base.2.4.running_mean', 'base.2.4.running_var', 'base.3.0.weight', 'base.3.1.weight', 'base.3.1.bias', 'base.3.1.running_mean', 'base.3.1.running_var', 'base.3.3.weight', 'base.3.4.weight', 'base.3.4.bias', 'base.3.4.running_mean', 'base.3.4.running_var', 'base.4.0.weight', 'base.4.1.weight', 'base.4.1.bias', 'base.4.1.running_mean', 'base.4.1.running_var', 'base.4.3.weight', 'base.4.4.weight', 'base.4.4.bias', 'base.4.4.running_mean', 'base.4.4.running_var', 'base.5.0.weight', 'base.5.1.weight', 'base.5.1.bias', 'base.5.1.running_mean', 'base.5.1.running_var', 'base.5.3.weight', 'base.5.4.weight', 'base.5.4.bias', 'base.5.4.running_mean', 'base.5.4.running_var', 'base.6.0.weight', 'base.6.1.weight', 'base.6.1.bias', 'base.6.1.running_mean', 'base.6.1.running_var', 'base.6.3.weight', 'base.6.4.weight', 'base.6.4.bias', 'base.6.4.running_mean', 'base.6.4.running_var', 'base.7.0.weight', 'base.7.1.weight', 'base.7.1.bias', 'base.7.1.running_mean', 'base.7.1.running_var', 'base.7.3.weight', 'base.7.4.weight', 'base.7.4.bias', 'base.7.4.running_mean', 'base.7.4.running_var', 'base.8.0.weight', 'base.8.1.weight', 'base.8.1.bias', 'base.8.1.running_mean', 'base.8.1.running_var', 'base.8.3.weight', 'base.8.4.weight', 'base.8.4.bias', 'base.8.4.running_mean', 'base.8.4.running_var', 'base.9.0.weight', 'base.9.1.weight', 'base.9.1.bias', 'base.9.1.running_mean', 'base.9.1.running_var', 'base.9.3.weight', 'base.9.4.weight', 'base.9.4.bias', 'base.9.4.running_mean', 'base.9.4.running_var', 'base.10.0.weight', 'base.10.1.weight', 'base.10.1.bias', 'base.10.1.running_mean', 'base.10.1.running_var', 'base.10.3.weight', 'base.10.4.weight', 'base.10.4.bias', 'base.10.4.running_mean', 'base.10.4.running_var', 'base.11.0.weight', 'base.11.1.weight', 'base.11.1.bias', 'base.11.1.running_mean', 'base.11.1.running_var', 'base.11.3.weight', 'base.11.4.weight', 'base.11.4.bias', 'base.11.4.running_mean', 'base.11.4.running_var', 'base.12.0.weight', 'base.12.1.weight', 'base.12.1.bias', 'base.12.1.running_mean', 'base.12.1.running_var', 'base.12.3.weight', 'base.12.4.weight', 'base.12.4.bias', 'base.12.4.running_mean', 'base.12.4.running_var', 'base.13.0.weight', 'base.13.1.weight', 'base.13.1.bias', 'base.13.1.running_mean', 'base.13.1.running_var', 'base.13.3.weight', 'base.13.4.weight', 'base.13.4.bias', 'base.13.4.running_mean', 'base.13.4.running_var', 'norm.branch0.0.conv.weight', 'norm.branch0.0.bn.weight', 'norm.branch0.0.bn.bias', 'norm.branch0.0.bn.running_mean', 'norm.branch0.0.bn.running_var', 'norm.branch0.1.conv.weight', 'norm.branch0.1.bn.weight', 'norm.branch0.1.bn.bias', 'norm.branch0.1.bn.running_mean', 'norm.branch0.1.bn.running_var', 'norm.branch1.0.conv.weight', 'norm.branch1.0.bn.weight', 'norm.branch1.0.bn.bias', 'norm.branch1.0.bn.running_mean', 'norm.branch1.0.bn.running_var', 'norm.branch1.1.conv.weight', 'norm.branch1.1.bn.weight', 'norm.branch1.1.bn.bias', 'norm.branch1.1.bn.running_mean', 'norm.branch1.1.bn.running_var', 'norm.branch1.2.conv.weight', 'norm.branch1.2.bn.weight', 'norm.branch1.2.bn.bias', 'norm.branch1.2.bn.running_mean', 'norm.branch1.2.bn.running_var', 'norm.branch2.0.conv.weight', 'norm.branch2.0.bn.weight', 'norm.branch2.0.bn.bias', 'norm.branch2.0.bn.running_mean', 'norm.branch2.0.bn.running_var', 'norm.branch2.1.conv.weight', 'norm.branch2.1.bn.weight', 'norm.branch2.1.bn.bias', 'norm.branch2.1.bn.running_mean', 'norm.branch2.1.bn.running_var', 'norm.branch2.2.conv.weight', 'norm.branch2.2.bn.weight', 'norm.branch2.2.bn.bias', 'norm.branch2.2.bn.running_mean', 'norm.branch2.2.bn.running_var', 'norm.branch3.0.conv.weight', 'norm.branch3.0.bn.weight', 'norm.branch3.0.bn.bias', 'norm.branch3.0.bn.running_mean', 'norm.branch3.0.bn.running_var', 'norm.branch3.1.conv.weight', 'norm.branch3.1.bn.weight', 'norm.branch3.1.bn.bias', 'norm.branch3.1.bn.running_mean', 'norm.branch3.1.bn.running_var', 'norm.branch3.2.conv.weight', 'norm.branch3.2.bn.weight', 'norm.branch3.2.bn.bias', 'norm.branch3.2.bn.running_mean', 'norm.branch3.2.bn.running_var', 'norm.branch3.3.conv.weight', 'norm.branch3.3.bn.weight', 'norm.branch3.3.bn.bias', 'norm.branch3.3.bn.running_mean', 'norm.branch3.3.bn.running_var', 'norm.ConvLinear.conv.weight', 'norm.ConvLinear.bn.weight', 'norm.ConvLinear.bn.bias', 'norm.ConvLinear.bn.running_mean', 'norm.ConvLinear.bn.running_var', 'extras.0.branch1.0.conv.weight', 'extras.0.branch1.0.bn.weight', 'extras.0.branch1.0.bn.bias', 'extras.0.branch1.0.bn.running_mean', 'extras.0.branch1.0.bn.running_var', 'extras.0.branch1.1.conv.weight', 'extras.0.branch1.1.bn.weight', 'extras.0.branch1.1.bn.bias', 'extras.0.branch1.1.bn.running_mean', 'extras.0.branch1.1.bn.running_var', 'extras.0.branch1.2.conv.weight', 'extras.0.branch1.2.bn.weight', 'extras.0.branch1.2.bn.bias', 'extras.0.branch1.2.bn.running_mean', 'extras.0.branch1.2.bn.running_var', 'extras.0.branch1.3.conv.weight', 'extras.0.branch1.3.bn.weight', 'extras.0.branch1.3.bn.bias', 'extras.0.branch1.3.bn.running_mean', 'extras.0.branch1.3.bn.running_var', 'extras.0.branch2.0.conv.weight', 'extras.0.branch2.0.bn.weight', 'extras.0.branch2.0.bn.bias', 'extras.0.branch2.0.bn.running_mean', 'extras.0.branch2.0.bn.running_var', 'extras.0.branch2.1.conv.weight', 'extras.0.branch2.1.bn.weight', 'extras.0.branch2.1.bn.bias', 'extras.0.branch2.1.bn.running_mean', 'extras.0.branch2.1.bn.running_var', 'extras.0.branch2.2.conv.weight', 'extras.0.branch2.2.bn.weight', 'extras.0.branch2.2.bn.bias', 'extras.0.branch2.2.bn.running_mean', 'extras.0.branch2.2.bn.running_var', 'extras.0.branch2.3.conv.weight', 'extras.0.branch2.3.bn.weight', 'extras.0.branch2.3.bn.bias', 'extras.0.branch2.3.bn.running_mean', 'extras.0.branch2.3.bn.running_var', 'extras.0.ConvLinear.conv.weight', 'extras.0.ConvLinear.bn.weight', 'extras.0.ConvLinear.bn.bias', 'extras.0.ConvLinear.bn.running_mean', 'extras.0.ConvLinear.bn.running_var', 'extras.0.shortcut.conv.weight', 'extras.0.shortcut.bn.weight', 'extras.0.shortcut.bn.bias', 'extras.0.shortcut.bn.running_mean', 'extras.0.shortcut.bn.running_var', 'extras.1.conv.weight', 'extras.1.bn.weight', 'extras.1.bn.bias', 'extras.1.bn.running_mean', 'extras.1.bn.running_var', 'extras.2.conv.weight', 'extras.2.bn.weight', 'extras.2.bn.bias', 'extras.2.bn.running_mean', 'extras.2.bn.running_var', 'extras.3.conv.weight', 'extras.3.bn.weight', 'extras.3.bn.bias', 'extras.3.bn.running_mean', 'extras.3.bn.running_var', 'extras.4.conv.weight', 'extras.4.bn.weight', 'extras.4.bn.bias', 'extras.4.bn.running_mean', 'extras.4.bn.running_var', 'extras.5.conv.weight', 'extras.5.bn.weight', 'extras.5.bn.bias', 'extras.5.bn.running_mean', 'extras.5.bn.running_var', 'extras.6.conv.weight', 'extras.6.bn.weight', 'extras.6.bn.bias', 'extras.6.bn.running_mean', 'extras.6.bn.running_var', 'loc.0.weight', 'loc.0.bias', 'loc.1.weight', 'loc.1.bias', 'loc.2.weight', 'loc.2.bias', 'loc.3.weight', 'loc.3.bias', 'loc.4.weight', 'loc.4.bias', 'loc.5.weight', 'loc.5.bias', 'conf.0.weight', 'conf.0.bias', 'conf.1.weight', 'conf.1.bias', 'conf.2.weight', 'conf.2.bias', 'conf.3.weight', 'conf.3.bias', 'conf.4.weight', 'conf.4.bias', 'conf.5.weight', 'conf.5.bias']
=> UNResume weigths:
set()
Traceback (most recent call last):
  File "test.py", line 45, in <module>
    test()
  File "test.py", line 42, in test
    test_model()
  File "/media/office_nas/Yang/project/detection/code/pytorch/ssds.pytorch/lib/ssds_train.py", line 537, in test_model
    s.test_model()
  File "/media/office_nas/Yang/project/detection/code/pytorch/ssds.pytorch/lib/ssds_train.py", line 189, in test_model
    self.test_epoch(self.model, self.test_loader, self.detector, self.output_dir , self.use_gpu)
  File "/media/office_nas/Yang/project/detection/code/pytorch/ssds.pytorch/lib/ssds_train.py", line 422, in test_epoch
    out = model(images, is_train=False)
  File "/home/yangliu/.conda/envs/pytorch/lib/python3.6/site-packages/torch/nn/modules/module.py", line 357, in __call__
    result = self.forward(*input, **kwargs)
  File "/media/office_nas/Yang/project/detection/code/pytorch/ssds.pytorch/lib/modeling/ssds/rfb_lite.py", line 78, in forward
    conf.append(c(x).permute(0, 2, 3, 1).contiguous())
  File "/home/yangliu/.conda/envs/pytorch/lib/python3.6/site-packages/torch/nn/modules/module.py", line 357, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/yangliu/.conda/envs/pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py", line 282, in forward
    self.padding, self.dilation, self.groups)
  File "/home/yangliu/.conda/envs/pytorch/lib/python3.6/site-packages/torch/nn/functional.py", line 90, in conv2d
    return f(input, weight, bias)
RuntimeError: CUDA error: out of memory
